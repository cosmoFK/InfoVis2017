<html>
    <head>
	<title>W12: Task</title>
    </head>
    <body style="margin:0">
	<script src="three.min.js"></script>
	<script src="Lut.js"></script>
	<script src="TrackballControls.js"></script>
	<script src="KVS.min.js"></script>
	<script src="KVS2THREE.min.js"></script>
	<script src="KVSLobsterData.js"></script>
	<script src="Bounds.js"></script>
	<script src="Isosurfaces3.js"></script>
	<script src="w12_main_Task3.js"></script>
	<script type="x-shader/x-vertex" id="Phong.vert">
	  varying vec3 point_color;
	  varying vec4 point_position;
	  varying vec3 normal_vector;
	  uniform vec3 light_position;
	  uniform vec3 C_color;
	  
	  vec3 PhongReflection( vec3 C, vec3 L, vec3 N ,vec3 V) {
	  float ka = 0.3;
	  float kd = 0.5;
	  float ks = 0.8;
	  float n = 50.0;
	  vec3 H = normalize(V + L);
	  float dd = max( dot( N, L ), 0.0 );
	  float ds = pow( max( dot( H, N ), 0.0 ), n );
	  if ( dd <= 0.0 ) { ds = 0.0; }
		     float Ia = ka;
		     float Id = kd * dd;
		     float Is = ks * ds;
		     return C * ( Ia + Id + Is );
		     }
		     
		     void main()
		     {
		     point_position = modelViewMatrix * vec4( position, 1.0 );
		     normal_vector = normalMatrix * normal;
		     vec3 C = C_color;
		     vec3 L = normalize( light_position - point_position.xyz );
		     vec3 N = normalize( normal_vector );
		     vec3 V = normalize( cameraPosition - point_position.xyz);
		     point_color = PhongReflection( C, L, N ,V);
		     gl_Position = projectionMatrix * point_position;
		     }
        </script>

	<script type="x-shader/x-fragment" id="Phong.frag">
	  varying vec3 point_color;
	  
	  void main()
	  {
	  gl_FragColor = vec4( point_color, 1.0 );
	  }
	</script>
	</script>
	<script>
	  main();
	</script>
    </body>
</html>
